COMMENT ('-- Initial fooua.cabal generated by cabal init.  For further documentation,')
NEWLINE ('\n')
COMMENT ('--  see http://haskell.org/cabal/users-guide/')
NEWLINE ('\n')
NEWLINE ('\n')
KEY ('name')
: (':')
WHITE_SPACE ('                ')
VALUE_WORD ('fooua')
EMPTY ('')
NEWLINE ('\n')
KEY ('version')
: (':')
WHITE_SPACE ('             ')
VALUE_WORD ('0')
VALUE_WORD ('.')
VALUE_WORD ('1')
VALUE_WORD ('.')
VALUE_WORD ('0')
VALUE_WORD ('.')
VALUE_WORD ('0')
EMPTY ('')
NEWLINE ('\n')
KEY ('synopsis')
: (':')
WHITE_SPACE ('            ')
VALUE_WORD ('This')
WHITE_SPACE (' ')
VALUE_WORD ('is')
WHITE_SPACE (' ')
VALUE_WORD ('a')
WHITE_SPACE (' ')
VALUE_WORD ('thing')
WHITE_SPACE (' ')
VALUE_WORD ('made')
WHITE_SPACE (' ')
VALUE_WORD ('just')
WHITE_SPACE (' ')
VALUE_WORD ('fooua')
VALUE_WORD ('!')
EMPTY ('')
NEWLINE ('\n')
KEY ('description')
: (':')
WHITE_SPACE ('         ')
VALUE_WORD ('A')
WHITE_SPACE (' ')
VALUE_WORD ('description')
WHITE_SPACE (' ')
VALUE_WORD ('should')
WHITE_SPACE (' ')
VALUE_WORD ('be')
WHITE_SPACE (' ')
VALUE_WORD ('long')
WHITE_SPACE (' ')
VALUE_WORD ('and')
WHITE_SPACE (' ')
VALUE_WORD ('span')
WHITE_SPACE (' ')
VALUE_WORD ('multiple')
WHITE_SPACE (' ')
VALUE_WORD ('lines')
VALUE_WORD ('.')
WHITE_SPACE ('  ')
VALUE_WORD ('If')
NEWLINE ('\n')
WHITE_SPACE ('                     ')
VALUE_WORD ('it')
WHITE_SPACE (' ')
VALUE_WORD ('doesn')
VALUE_WORD (''')
VALUE_WORD ('t')
, (',')
WHITE_SPACE (' ')
VALUE_WORD ('it')
WHITE_SPACE (' ')
VALUE_WORD ('couldn')
VALUE_WORD (''')
VALUE_WORD ('t')
WHITE_SPACE (' ')
VALUE_WORD ('possibly')
WHITE_SPACE (' ')
VALUE_WORD ('be')
WHITE_SPACE (' ')
VALUE_WORD ('very')
WHITE_SPACE (' ')
VALUE_WORD ('descriptive')
, (',')
WHITE_SPACE (' ')
VALUE_WORD ('eh')
VALUE_WORD ('?')
NEWLINE ('\n')
WHITE_SPACE ('                         ')
VALUE_WORD ('But')
WHITE_SPACE (' ')
VALUE_WORD ('then')
WHITE_SPACE (' ')
VALUE_WORD ('again')
, (',')
WHITE_SPACE (' ')
VALUE_WORD ('the')
WHITE_SPACE (' ')
VALUE_WORD ('fact')
WHITE_SPACE (' ')
VALUE_WORD ('that')
WHITE_SPACE (' ')
VALUE_WORD ('each')
WHITE_SPACE (' ')
VALUE_WORD ('line')
WHITE_SPACE (' ')
VALUE_WORD ('is')
WHITE_SPACE (' ')
VALUE_WORD ('prefixed')
WHITE_SPACE (' ')
VALUE_WORD ('with')
NEWLINE ('\n')
WHITE_SPACE ('                     ')
VALUE_WORD ('whitespace')
WHITE_SPACE (' ')
VALUE_WORD ('is')
WHITE_SPACE (' ')
VALUE_WORD ('fun')
VALUE_WORD ('.')
EMPTY ('')
NEWLINE ('\n')
KEY ('license')
: (':')
WHITE_SPACE ('             ')
VALUE_WORD ('Apache')
VALUE_WORD ('-')
VALUE_WORD ('2')
VALUE_WORD ('.')
VALUE_WORD ('0')
EMPTY ('')
NEWLINE ('\n')
KEY ('license-file')
: (':')
WHITE_SPACE ('        ')
VALUE_WORD ('LICENSE')
EMPTY ('')
NEWLINE ('\n')
KEY ('author')
: (':')
WHITE_SPACE ('              ')
VALUE_WORD ('Cary')
WHITE_SPACE (' ')
VALUE_WORD ('M')
VALUE_WORD ('.')
WHITE_SPACE (' ')
VALUE_WORD ('Robbins')
EMPTY ('')
NEWLINE ('\n')
KEY ('maintainer')
: (':')
WHITE_SPACE ('          ')
VALUE_WORD ('carymrobbins')
VALUE_WORD ('@')
VALUE_WORD ('gmail')
VALUE_WORD ('.')
VALUE_WORD ('com')
NEWLINE ('\n')
COMMENT ('-- copyright:           ')
EMPTY ('')
NEWLINE ('\n')
KEY ('category')
: (':')
WHITE_SPACE ('            ')
VALUE_WORD ('Concurrency')
EMPTY ('')
NEWLINE ('\n')
KEY ('build-type')
: (':')
WHITE_SPACE ('          ')
VALUE_WORD ('Simple')
NEWLINE ('\n')
COMMENT ('-- extra-source-files:  ')
EMPTY ('')
NEWLINE ('\n')
KEY ('cabal-version')
: (':')
WHITE_SPACE ('       ')
>= ('>=')
VALUE_WORD ('1')
VALUE_WORD ('.')
VALUE_WORD ('10')
NEWLINE ('\n')
EMPTY ('')
NEWLINE ('\n')
COMPONENT_TYPE ('executable')
WHITE_SPACE (' ')
COMPONENT_NAME ('fooua')
NEWLINE ('\n')
INDENT ('  ')
KEY ('main-is')
: (':')
WHITE_SPACE ('             ')
VALUE_WORD ('Main')
VALUE_WORD ('.')
VALUE_WORD ('hs')
NEWLINE ('\n')
COMMENT ('  -- other-modules:       ')
NEWLINE ('\n')
COMMENT ('  -- other-extensions:')
NEWLINE ('\n')
EMPTY ('')
NEWLINE ('\n')
INDENT ('  ')
KEY ('extensions')
: (':')
WHITE_SPACE (' ')
VALUE_WORD ('TemplateHaskell')
NEWLINE ('\n')
WHITE_SPACE ('              ')
VALUE_WORD ('QuasiQuotes')
NEWLINE ('\n')
EMPTY ('')
NEWLINE ('\n')
INDENT ('  ')
KEY ('build-depends')
: (':')
WHITE_SPACE ('       ')
VALUE_WORD ('base')
WHITE_SPACE (' ')
>= ('>=')
VALUE_WORD ('4')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
< ('<')
VALUE_WORD ('5')
NEWLINE ('\n')
COMMENT ('  -- hs-source-dirs:')
EMPTY ('')
NEWLINE ('\n')
INDENT ('  ')
KEY ('default-language')
: (':')
WHITE_SPACE ('    ')
VALUE_WORD ('Haskell2010')